name: Unit Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - unit
        - coverage

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: latest

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          .venv
          .uv
        key: ${{ runner.os }}-3.13-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-3.13-

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Run linting
      run: |
        source .venv/bin/activate
        ruff check cnoe_agent_utils tests

    - name: Run unit tests
      if: github.event.inputs.test_type != 'coverage' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch'
      run: |
        source .venv/bin/activate
        pytest tests/ -v --cov=cnoe_agent_utils --cov-report=term-missing --cov-report=xml

    - name: Upload coverage to Codecov
      if: github.event.inputs.test_type == 'coverage' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'coverage' || github.event.inputs.test_type == 'all'
    needs: unit-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: latest

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          .venv
          .uv
        key: ${{ runner.os }}-3.13-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-3.13-

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Run coverage report
      run: |
        source .venv/bin/activate
        pytest tests/ --cov=cnoe_agent_utils --cov-report=html --cov-report=xml

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

    - name: Generate coverage badge
      run: |
        echo "Coverage report generated successfully"
        echo "Check the artifacts for detailed HTML coverage report"

    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const coverage = fs.readFileSync('coverage.xml', 'utf8');
          const match = coverage.match(/<coverage.*?line-rate="([^"]+)"/);
          const coveragePercent = match ? Math.round(parseFloat(match[1]) * 100) : 'Unknown';

          const comment = `## ðŸ“Š Test Coverage: ${coveragePercent}%

          Coverage report generated successfully!

          **Current Coverage:** ${coveragePercent}%

          Check the workflow artifacts for detailed HTML coverage report.`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
